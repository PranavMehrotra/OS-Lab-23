#include <iostream>
#include <cstring>
#include <unistd.h>
using namespace std;

#include <cstdio>

long long get_usage(int pid){
	char stat_file[100];
    snprintf(stat_file,sizeof(stat_file), "/proc/%d/stat", pid);
    FILE *fp = fopen(stat_file, "r");
    if (!fp){
        perror("fopen");
        exit(1);
    }

    char buf[1000];
    fgets(buf, sizeof(buf), fp);
    char *p = strtok(buf, " ");
    int i = 0;
    long long utime, stime, starttime;
    while(p){
	    if(i == 13) utime = strtol(p, NULL, 10);
        if(i == 14) stime = strtol(p, NULL, 10);
        p = strtok(NULL, " ");
        i++;
    }
	fclose(fp);
	return (utime + stime);
}

long long get_total_usage(){
	FILE *fp = fopen("/proc/stat","r");
	if(!fp){
		perror("fopen");
		exit(0);
	}
	char buff[1000];
	fgets(buff,sizeof(buff),fp);
	char *p = strtok(buff," ");
	int i = 0;
	long long ans=0;
	while(p){
		if(i>0)ans += atoi(p);
		p = strtok(NULL," ");
		i++;
	}
	return ans;
}

void usage_stats(int pid,int suggest_flag){
	int i=0;
	char path[256];
	cout << "Current process id " << pid << " " << get_usage(pid) << endl;
	while(1){
	  	snprintf(path, sizeof(path), "/proc/%d/status", pid);
		FILE* file = fopen(path, "r");
		if(!file){
			perror("fopen");
			return;
		}
		char line[256];
  		while (fgets(line, sizeof(line), file)){
    		if (strncmp(line, "PPid:", 5) == 0){
      			int ppid;
      			sscanf(line + 5, "%d", &ppid);
				if(pid==ppid){
					pid=ppid;
					break;
				} 
				cout << "Parent process ID: " << ppid << " ";
      			long long ti = get_usage(pid);
				cout << ti << endl;
				pid = ppid;
				break;
    		}
  		}
		if(pid==0)break;
		fclose(file);
		i++;
	}

	if(suggest_flag==0){
		return;
	}

	long long total_time = get_total_usage();
	cout << "Total time " << total_time<< endl;		
}

int main(int argc,char *argv[]){
	int pid,suggest_flag=0;
	if(argc==2){
		pid = atoi(argv[1]);
	}
	else if(argc==3){
		pid = (strcmp(argv[1],"-suggest")==0)? 2:1;
		suggest_flag=1;
		pid = atoi(argv[pid]);
	}
	char path[64];

	usage_stats(pid,suggest_flag);
	sleep(10);
	usage_stats(pid,suggest_flag);
	
  	return 0;
}

