start = 0
finish = 0
multiset<{priority , room}> = {/*initialzed in main*/}

while(1){
    guest_book.wait()
    if(start == 0){
        hotel_open.wait()
    }

    min = set.begin()
    new_room = room()

    if(min.first == INF){       // all rooms used twice
        guest_book.signal()
        continue
    }

    else if(min.first == 0){    // empty room exists
        new_room.occ = min.occ + 1
        if(new_room.occ == 2) new_room.priority = INF
        else new_room.priority = priority[id]
        new_room.start_time = time.curr()
        set.erase(min)
        set.insert(new_room)
    }

    else if(min.first >= priority[id]){     // cannot evict even the least priority occupant
        guest_book.signal()
        continue
    }

    else{       // can and WILL evict the least priority occupant
        new_room.occ = 2
        new_room.priority = INF
        new_room.total_time = time.curr() - min.start_time
        new_room.start_time = time.curr()
        cancelled[min.id] = TRUE
        pthread_kill(min.tid , SIGUSR1)
        set.erase(min)
        set.insert(new_room)    // with new parameters
    }
    
    start++
    guest_book.signal(time)

    time = rand()
    sleep(time)

    while(guest_book.wait() < 0);   // safeguard against race
    
}